#ifndef PIXIE_H
#define PIXIE_H


#include <stdint.h>
#include "wps_utils.h"
#include "sys/_timeval.h"
#include "wps_defs.h"


const uint8_t wps_rtl_pke[] = {
	0xD0,0x14,0x1B,0x15, 0x65,0x6E,0x96,0xB8, 0x5F,0xCE,0xAD,0x2E, 0x8E,0x76,0x33,0x0D,
	0x2B,0x1A,0xC1,0x57, 0x6B,0xB0,0x26,0xE7, 0xA3,0x28,0xC0,0xE1, 0xBA,0xF8,0xCF,0x91,
	0x66,0x43,0x71,0x17, 0x4C,0x08,0xEE,0x12, 0xEC,0x92,0xB0,0x51, 0x9C,0x54,0x87,0x9F,
	0x21,0x25,0x5B,0xE5, 0xA8,0x77,0x0E,0x1F, 0xA1,0x88,0x04,0x70, 0xEF,0x42,0x3C,0x90,
	0xE3,0x4D,0x78,0x47, 0xA6,0xFC,0xB4,0x92, 0x45,0x63,0xD1,0xAF, 0x1D,0xB0,0xC4,0x81,
	0xEA,0xD9,0x85,0x2C, 0x51,0x9B,0xF1,0xDD, 0x42,0x9C,0x16,0x39, 0x51,0xCF,0x69,0x18,
	0x1B,0x13,0x2A,0xEA, 0x2A,0x36,0x84,0xCA, 0xF3,0x5B,0xC5,0x4A, 0xCA,0x1B,0x20,0xC8,
	0x8B,0xB3,0xB7,0x33, 0x9F,0xF7,0xD5,0x6E, 0x09,0x13,0x9D,0x77, 0xF0,0xAC,0x58,0x07,
	0x90,0x97,0x93,0x82, 0x51,0xDB,0xBE,0x75, 0xE8,0x67,0x15,0xCC, 0x6B,0x7C,0x0C,0xA9,
	0x45,0xFa,0x8D,0xD8, 0xD6,0x61,0xBE,0xB7, 0x3B,0x41,0x40,0x32, 0x79,0x8D,0xAD,0xEE,
	0x32,0xB5,0xDD,0x61, 0xBF,0x10,0x5F,0x18, 0xD8,0x92,0x17,0x76, 0x0B,0x75,0xC5,0xD9,
	0x66,0xA5,0xA4,0x90, 0x47,0x2C,0xEB,0xA9, 0xE3,0xB4,0x22,0x4F, 0x3D,0x89,0xFB,0x2B
};


static uint32_t glibc_seed_tbl[31 + 3] = {
		0x0128e83b, 0x00dafa31, 0x009f4828, 0x00f66443, 0x00bee24d, 0x00817005, 0x00cb918f,
		0x00a64845, 0x0069c3cf, 0x00a76dbd, 0x0090a848, 0x0057025f, 0x0089126c, 0x007d9a8f,
		0x0048252a, 0x006fb2d4, 0x006ccc15, 0x003c5744, 0x005a998f, 0x005df917, 0x0032ed77,
		0x00492688, 0x0050e901, 0x002b5f57, 0x003acd0b, 0x00456b7a, 0x0025413d, 0x002f11f4,
		0x003b564d, 0x00203f14, 0x002589fc, 0x003283f8, 0x001c17e4, 0x001dd823
};


struct wps_state {
	char pin[WPS_PIN_LEN + 1];
	uint8_t *pke;
	uint8_t *pkr;
	uint8_t *e_key;
	uint8_t *e_hash1;
	uint8_t *e_hash2;
	uint8_t *authkey;
	uint8_t *e_nonce;
	uint8_t *r_nonce;
	uint8_t *psk1;
	uint8_t *psk2;
	uint8_t *empty_psk;
	uint8_t *dhkey;
	uint8_t *kdk;
	uint8_t *wrapkey;
	uint8_t *emsk;
	uint8_t *e_s1;
	uint8_t *e_s2;
	uint8_t *e_bssid;
	uint8_t *m5_encr;
	uint8_t *m7_encr;
	unsigned int m5_encr_len;
	unsigned int m7_encr_len;
	uint32_t nonce_seed;
	uint32_t s1_seed;
	uint32_t s2_seed;
	time_t start;
	time_t end;
	uint8_t small_dh_keys;
	uint8_t mode_auto;
	uint8_t bruteforce;
	uint8_t anylength;
	uint8_t nonce_match;
	int jobs;
	int verbosity;
	char *error;
	char *warning;
};

typedef unsigned long pthread_t;


struct crack_job {
	pthread_t thr;
	uint32_t start;
};

static struct job_control {
	int jobs;
	int mode;
	uint32_t end;
	uint32_t randr_enonce[4];
	struct wps_state *wps;
	struct crack_job *crack_jobs;
	volatile uint32_t nonce_seed;
} job_control;

struct ralink_randstate {
	uint32_t sreg;
};


void wps_start_connection(uint8_t *bssid);



static int crack_first_half(struct wps_state *wps, char *pin, const uint8_t *es1_override);
static int crack_second_half(struct wps_state *wps, char *pin);
static int crack(struct wps_state *wps, char *pin);
static void crack_thread_rtl(struct crack_job *j);
static unsigned char ralink_randbyte(struct ralink_randstate *state);
static void ralink_randstate_restore(struct ralink_randstate *state, uint8_t r);
static unsigned char ralink_randbyte_backwards(struct ralink_randstate *state);
static int crack_rt(uint32_t start, uint32_t end, uint32_t *result);
static void crack_thread_rt(struct crack_job *j);
static void crack_thread_rtl_es(struct crack_job *j);
static void *crack_thread(void *arg);
static void setup_thread(int i);
static void init_crack_jobs(struct wps_state *wps, int mode);
static uint32_t collect_crack_jobs();
static void rtl_nonce_fill(uint8_t *nonce, uint32_t seed);
static int find_rtl_es1(struct wps_state *wps, char *pin, uint8_t *nonce_buf, uint32_t seed);
static int check_empty_pin_half(const uint8_t *es, struct wps_state *wps, const uint8_t *ehash);
static int check_pin_half(const uint8_t *authkey, size_t authkey_len, const char pinhalf[4], uint8_t *psk, const uint8_t *es, struct wps_state *wps, const uint8_t *ehash);
static int crack_first_half(struct wps_state *wps, char *pin, const uint8_t *es1_override);
static int crack_second_half(struct wps_state *wps, char *pin);
static uint32_t ecos_rand_knuth(uint32_t *seed);
static uint32_t ecos_rand_simple(uint32_t *seed);
static uint32_t ecos_rand_simplest(uint32_t *seed);


#endif